
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  username: 'username',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  operatorEntityId: 'operatorEntityId',
  createdBy: 'createdBy'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  entityType: 'entityType',
  permission: 'permission',
  isGranted: 'isGranted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OperatorEntityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  roleId: 'roleId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  pin: 'pin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryAddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  isDefault: 'isDefault',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.PaymentGatewayServiceProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  countryCode: 'countryCode',
  currencyCode: 'currencyCode',
  isActive: 'isActive',
  logoUrl: 'logoUrl',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  deviceId: 'deviceId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  isVerified: 'isVerified',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  brand: 'brand',
  modelName: 'modelName',
  osVersion: 'osVersion',
  phoneNumber: 'phoneNumber',
  lastLogoutAt: 'lastLogoutAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  deviceId: 'deviceId'
};

exports.Prisma.OTPScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  code: 'code',
  type: 'type',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  isUsed: 'isUsed',
  attempts: 'attempts',
  originalCode: 'originalCode'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  title: 'title',
  description: 'description',
  price: 'price',
  currencyCode: 'currencyCode',
  quantity: 'quantity',
  categoryId: 'categoryId',
  condition: 'condition',
  locationId: 'locationId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  views: 'views',
  favorites: 'favorites',
  rating: 'rating',
  ratingCount: 'ratingCount',
  isFeatured: 'isFeatured',
  featuredUntil: 'featuredUntil',
  metadata: 'metadata'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  imageUrl: 'imageUrl',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  width: 'width',
  height: 'height',
  size: 'size',
  format: 'format',
  altText: 'altText'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  slug: 'slug',
  description: 'description',
  imageUrl: 'imageUrl',
  order: 'order',
  isActive: 'isActive',
  metadata: 'metadata',
  createdBy: 'createdBy'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  countryCode: 'countryCode',
  region: 'region',
  city: 'city',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  latitude: 'latitude',
  longitude: 'longitude',
  timezone: 'timezone',
  isActive: 'isActive'
};

exports.Prisma.ProductAttributeScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  unit: 'unit',
  isFilterable: 'isFilterable',
  order: 'order'
};

exports.Prisma.ProductTranslationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  locale: 'locale',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductDeliveryOptionScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  deliveryType: 'deliveryType',
  name: 'name',
  description: 'description',
  price: 'price',
  currencyCode: 'currencyCode',
  estimatedDays: 'estimatedDays',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryTranslationScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  locale: 'locale',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellerKycScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessName: 'businessName',
  businessType: 'businessType',
  registrationNumber: 'registrationNumber',
  taxId: 'taxId',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  documentUrl: 'documentUrl',
  status: 'status',
  rejectionReason: 'rejectionReason',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  country: 'country',
  documentExpiryDate: 'documentExpiryDate',
  statusChangedBy: 'statusChangedBy',
  statusChangedAt: 'statusChangedAt'
};

exports.Prisma.BankAccountScalarFieldEnum = {
  id: 'id',
  sellerKycId: 'sellerKycId',
  accountName: 'accountName',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  bankCode: 'bankCode',
  branchCode: 'branchCode',
  swiftCode: 'swiftCode',
  iban: 'iban',
  currency: 'currency',
  isDefault: 'isDefault',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  sellerKycId: 'sellerKycId',
  walletType: 'walletType',
  walletAddress: 'walletAddress',
  currency: 'currency',
  isDefault: 'isDefault',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  account: 'account'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  accountId: 'accountId',
  accountName: 'accountName',
  isDefault: 'isDefault',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettlementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  type: 'type',
  reference: 'reference',
  bankAccountId: 'bankAccountId',
  walletId: 'walletId',
  metadata: 'metadata',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  includedOrderIds: 'includedOrderIds',
  netAmountBeforeFees: 'netAmountBeforeFees',
  serviceFeesDeducted: 'serviceFeesDeducted',
  totalOrdersCount: 'totalOrdersCount',
  channel: 'channel',
  includedRideIds: 'includedRideIds',
  totalRidesCount: 'totalRidesCount'
};

exports.Prisma.ProductViewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  userId: 'userId',
  deviceId: 'deviceId',
  ipAddress: 'ipAddress',
  viewedAt: 'viewedAt'
};

exports.Prisma.ProductOrderInterestScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  userId: 'userId',
  quantity: 'quantity',
  originalPrice: 'originalPrice',
  discountPrice: 'discountPrice',
  currencyCode: 'currencyCode',
  totalAmount: 'totalAmount',
  status: 'status',
  notes: 'notes',
  preferredDeliveryDate: 'preferredDeliveryDate',
  deliveryAddress: 'deliveryAddress',
  contactPhone: 'contactPhone',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  productSnapshot: 'productSnapshot',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExternalTransactionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  customerId: 'customerId',
  sellerId: 'sellerId',
  paymentMethodId: 'paymentMethodId',
  gatewayProvider: 'gatewayProvider',
  gatewayTransactionId: 'gatewayTransactionId',
  paymentReference: 'paymentReference',
  amount: 'amount',
  currencyCode: 'currencyCode',
  gatewayChargeFees: 'gatewayChargeFees',
  paidThroughGateway: 'paidThroughGateway',
  gatewayResponse: 'gatewayResponse',
  gatewayRequest: 'gatewayRequest',
  status: 'status',
  failureReason: 'failureReason',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  appTransactionId: 'appTransactionId',
  processedAmount: 'processedAmount',
  transactionType: 'transactionType',
  appService: 'appService',
  rideRequestId: 'rideRequestId',
  rentalRequestId: 'rentalRequestId'
};

exports.Prisma.UCPScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  description: 'description',
  serviceType: 'serviceType',
  isActive: 'isActive',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.RiderApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  vehicleType: 'vehicleType',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  dateOfBirth: 'dateOfBirth',
  address: 'address',
  city: 'city',
  licenseNumber: 'licenseNumber',
  licenseExpiry: 'licenseExpiry',
  vehicleModel: 'vehicleModel',
  vehiclePlate: 'vehiclePlate',
  insuranceNumber: 'insuranceNumber',
  insuranceExpiry: 'insuranceExpiry',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  experience: 'experience',
  availability: 'availability',
  status: 'status',
  rejectionReason: 'rejectionReason',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RiderDocumentScalarFieldEnum = {
  id: 'id',
  riderApplicationId: 'riderApplicationId',
  documentType: 'documentType',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.RentalRequestScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  customerId: 'customerId',
  driverId: 'driverId',
  riderApplicationId: 'riderApplicationId',
  rideServiceId: 'rideServiceId',
  status: 'status',
  pickupAddress: 'pickupAddress',
  pickupLocation: 'pickupLocation',
  pickupLatitude: 'pickupLatitude',
  pickupLongitude: 'pickupLongitude',
  startDate: 'startDate',
  endDate: 'endDate',
  days: 'days',
  proposedPrice: 'proposedPrice',
  agreedPrice: 'agreedPrice',
  currency: 'currency',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  chatMeta: 'chatMeta'
};

exports.Prisma.RentalMessageScalarFieldEnum = {
  id: 'id',
  rentalId: 'rentalId',
  senderId: 'senderId',
  senderType: 'senderType',
  content: 'content',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  riderApplicationId: 'riderApplicationId',
  driverId: 'driverId',
  isOnline: 'isOnline',
  status: 'status',
  currentLocation: 'currentLocation',
  lastLocationUpdate: 'lastLocationUpdate',
  totalRides: 'totalRides',
  totalEarnings: 'totalEarnings',
  rating: 'rating',
  ratingCount: 'ratingCount',
  vehicleInfo: 'vehicleInfo',
  documents: 'documents',
  preferences: 'preferences',
  isVerified: 'isVerified',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rideServiceId: 'rideServiceId',
  updatedBy: 'updatedBy',
  isRentalType: 'isRentalType'
};

exports.Prisma.DriverLocationScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  latitude: 'latitude',
  longitude: 'longitude',
  address: 'address',
  accuracy: 'accuracy',
  speed: 'speed',
  heading: 'heading',
  timestamp: 'timestamp'
};

exports.Prisma.RideRequestScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  customerId: 'customerId',
  driverId: 'driverId',
  pickupLocation: 'pickupLocation',
  destinationLocation: 'destinationLocation',
  rideType: 'rideType',
  estimatedDistance: 'estimatedDistance',
  estimatedDuration: 'estimatedDuration',
  estimatedPrice: 'estimatedPrice',
  actualPrice: 'actualPrice',
  status: 'status',
  paymentMethod: 'paymentMethod',
  customerNotes: 'customerNotes',
  driverNotes: 'driverNotes',
  requestedAt: 'requestedAt',
  acceptedAt: 'acceptedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  cancelledAt: 'cancelledAt',
  cancelledBy: 'cancelledBy',
  cancellationReason: 'cancellationReason',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rideServiceId: 'rideServiceId',
  currency: 'currency',
  currencySymbol: 'currencySymbol'
};

exports.Prisma.RideScalarFieldEnum = {
  id: 'id',
  rideId: 'rideId',
  rideRequestId: 'rideRequestId',
  driverId: 'driverId',
  customerId: 'customerId',
  pickupLocation: 'pickupLocation',
  destinationLocation: 'destinationLocation',
  actualPickupLocation: 'actualPickupLocation',
  actualDropoffLocation: 'actualDropoffLocation',
  rideType: 'rideType',
  distance: 'distance',
  duration: 'duration',
  baseFare: 'baseFare',
  distanceFare: 'distanceFare',
  timeFare: 'timeFare',
  surgeFare: 'surgeFare',
  totalFare: 'totalFare',
  driverEarnings: 'driverEarnings',
  platformFee: 'platformFee',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  status: 'status',
  customerRating: 'customerRating',
  driverRating: 'driverRating',
  customerReview: 'customerReview',
  driverReview: 'driverReview',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  cancelledAt: 'cancelledAt',
  cancelledBy: 'cancelledBy',
  cancellationReason: 'cancellationReason',
  route: 'route',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rideServiceId: 'rideServiceId',
  settlementStatus: 'settlementStatus'
};

exports.Prisma.RideTokenScalarFieldEnum = {
  id: 'id',
  rideId: 'rideId',
  token: 'token',
  isUsed: 'isUsed',
  usedAt: 'usedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RideLocationScalarFieldEnum = {
  id: 'id',
  rideId: 'rideId',
  latitude: 'latitude',
  longitude: 'longitude',
  accuracy: 'accuracy',
  speed: 'speed',
  heading: 'heading',
  timestamp: 'timestamp'
};

exports.Prisma.DriverEarningScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  rideId: 'rideId',
  amount: 'amount',
  type: 'type',
  description: 'description',
  processedAt: 'processedAt',
  createdAt: 'createdAt'
};

exports.Prisma.RideServiceScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  name: 'name',
  description: 'description',
  vehicleType: 'vehicleType',
  isActive: 'isActive',
  isDefault: 'isDefault',
  distanceUnit: 'distanceUnit',
  baseDistance: 'baseDistance',
  maxDistance: 'maxDistance',
  baseFare: 'baseFare',
  perKmRate: 'perKmRate',
  perMinuteRate: 'perMinuteRate',
  minimumFare: 'minimumFare',
  maximumFare: 'maximumFare',
  currency: 'currency',
  currencySymbol: 'currencySymbol',
  surgeMultiplier: 'surgeMultiplier',
  maxSurgeMultiplier: 'maxSurgeMultiplier',
  platformFeePercentage: 'platformFeePercentage',
  driverEarningsPercentage: 'driverEarningsPercentage',
  nightFareMultiplier: 'nightFareMultiplier',
  weekendFareMultiplier: 'weekendFareMultiplier',
  cancellationFee: 'cancellationFee',
  cancellationTimeLimit: 'cancellationTimeLimit',
  features: 'features',
  restrictions: 'restrictions',
  estimatedPickupTime: 'estimatedPickupTime',
  maxWaitTime: 'maxWaitTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  isRentalType: 'isRentalType'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  userId: 'userId',
  sellerId: 'sellerId',
  status: 'status',
  subtotal: 'subtotal',
  taxAmount: 'taxAmount',
  shippingAmount: 'shippingAmount',
  discountAmount: 'discountAmount',
  totalAmount: 'totalAmount',
  currencyCode: 'currencyCode',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  shippingAddress: 'shippingAddress',
  billingAddress: 'billingAddress',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  paymentReference: 'paymentReference',
  paidAt: 'paidAt',
  shippingMethod: 'shippingMethod',
  trackingNumber: 'trackingNumber',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  notes: 'notes',
  sellerNotes: 'sellerNotes',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancelledAt: 'cancelledAt',
  deliveryCurrency: 'deliveryCurrency'
};

exports.Prisma.TwilioNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  to: 'to',
  from: 'from',
  messagingServiceSid: 'messagingServiceSid',
  messageBody: 'messageBody',
  messageType: 'messageType',
  twilioSid: 'twilioSid',
  twilioStatus: 'twilioStatus',
  segments: 'segments',
  price: 'price',
  priceUnit: 'priceUnit',
  currencyCode: 'currencyCode',
  errorCode: 'errorCode',
  errorMessage: 'errorMessage',
  environment: 'environment',
  apiRequest: 'apiRequest',
  apiResponse: 'apiResponse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.EntityType = exports.$Enums.EntityType = {
  DASHBOARD: 'DASHBOARD',
  USERS: 'USERS',
  USERS_SNAP_USERS: 'USERS_SNAP_USERS',
  USERS_KYC_APPROVAL: 'USERS_KYC_APPROVAL',
  PRODUCTS: 'PRODUCTS',
  PRODUCTS_CATEGORIES: 'PRODUCTS_CATEGORIES',
  ORDERS: 'ORDERS',
  SETTLEMENTS: 'SETTLEMENTS',
  SETTLEMENTS_REQUESTS: 'SETTLEMENTS_REQUESTS',
  SETTLEMENTS_SHEET: 'SETTLEMENTS_SHEET',
  SETTLEMENTS_CUMULATIVE_ENTRIES: 'SETTLEMENTS_CUMULATIVE_ENTRIES',
  JOURNALS: 'JOURNALS',
  JOURNALS_STRIPE_PAYMENT_REPORT: 'JOURNALS_STRIPE_PAYMENT_REPORT',
  JOURNALS_SNAP_FEE_REPORT: 'JOURNALS_SNAP_FEE_REPORT',
  JOURNALS_AUDIT_REPORT: 'JOURNALS_AUDIT_REPORT',
  SYSTEM_CONFIG: 'SYSTEM_CONFIG',
  SYSTEM_CONFIG_ROLES: 'SYSTEM_CONFIG_ROLES',
  SYSTEM_CONFIG_OPERATOR_ENTITY: 'SYSTEM_CONFIG_OPERATOR_ENTITY',
  SYSTEM_CONFIG_SYSTEM_OPERATOR: 'SYSTEM_CONFIG_SYSTEM_OPERATOR',
  SYSTEM_CONFIG_SETTLEMENT_GROUP: 'SYSTEM_CONFIG_SETTLEMENT_GROUP',
  SYSTEM_CONFIG_PAYMENT_GATEWAYS: 'SYSTEM_CONFIG_PAYMENT_GATEWAYS',
  SNAP_RIDE: 'SNAP_RIDE',
  SNAP_RIDE_RIDER_APPLICATIONS: 'SNAP_RIDE_RIDER_APPLICATIONS',
  SNAP_RIDE_DRIVER_MANAGEMENT: 'SNAP_RIDE_DRIVER_MANAGEMENT',
  SNAP_RIDE_RIDE_MANAGEMENT: 'SNAP_RIDE_RIDE_MANAGEMENT',
  SNAP_RIDE_ANALYTICS: 'SNAP_RIDE_ANALYTICS',
  SNAP_RIDE_RIDE_SERVICE: 'SNAP_RIDE_RIDE_SERVICE',
  SNAP_RIDE_RIDE_SERVICE_TIERS: 'SNAP_RIDE_RIDE_SERVICE_TIERS',
  SNAP_RENTAL: 'SNAP_RENTAL',
  SNAP_RENTAL_REQUEST: 'SNAP_RENTAL_REQUEST',
  ANALYTICS: 'ANALYTICS',
  ANALYTICS_REVENUE: 'ANALYTICS_REVENUE'
};

exports.Permission = exports.$Enums.Permission = {
  ADD: 'ADD',
  EDIT: 'EDIT',
  VIEW: 'VIEW',
  DELETE: 'DELETE',
  EXPORT: 'EXPORT'
};

exports.ProductCondition = exports.$Enums.ProductCondition = {
  NEW: 'NEW',
  EXCELLENT: 'EXCELLENT',
  VERY_GOOD: 'VERY_GOOD',
  REFURBISHED: 'REFURBISHED'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SOLD: 'SOLD',
  PENDING: 'PENDING'
};

exports.DeliveryType = exports.$Enums.DeliveryType = {
  STANDARD: 'STANDARD',
  EXPRESS: 'EXPRESS',
  SAME_DAY: 'SAME_DAY',
  NEXT_DAY: 'NEXT_DAY',
  PICKUP: 'PICKUP',
  INTERNATIONAL: 'INTERNATIONAL'
};

exports.BusinessType = exports.$Enums.BusinessType = {
  INDIVIDUAL: 'INDIVIDUAL',
  SOLE_PROPRIETORSHIP: 'SOLE_PROPRIETORSHIP',
  PARTNERSHIP: 'PARTNERSHIP',
  CORPORATION: 'CORPORATION',
  LLC: 'LLC'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  NATIONAL_ID: 'NATIONAL_ID',
  PASSPORT: 'PASSPORT',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  BUSINESS_REGISTRATION: 'BUSINESS_REGISTRATION',
  TAX_CERTIFICATE: 'TAX_CERTIFICATE',
  CAR_INTERIOR_PHOTO: 'CAR_INTERIOR_PHOTO',
  CAR_EXTERIOR_PHOTO: 'CAR_EXTERIOR_PHOTO'
};

exports.KycStatus = exports.$Enums.KycStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  BLOCKED: 'BLOCKED'
};

exports.WalletType = exports.$Enums.WalletType = {
  CRYPTO: 'CRYPTO',
  MOBILE_MONEY: 'MOBILE_MONEY',
  DIGITAL_WALLET: 'DIGITAL_WALLET'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  MOBILE_MONEY: 'MOBILE_MONEY',
  CRYPTO: 'CRYPTO',
  DIGITAL_WALLET: 'DIGITAL_WALLET'
};

exports.SettlementStatus = exports.$Enums.SettlementStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.SettlementType = exports.$Enums.SettlementType = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  WALLET_TRANSFER: 'WALLET_TRANSFER',
  ECOMMERCE: 'ECOMMERCE',
  RIDES: 'RIDES'
};

exports.SettlementChannel = exports.$Enums.SettlementChannel = {
  ECOMMERCE: 'ECOMMERCE',
  RIDES: 'RIDES'
};

exports.OrderInterestStatus = exports.$Enums.OrderInterestStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  NEGOTIATING: 'NEGOTIATING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED',
  CONVERTED_TO_ORDER: 'CONVERTED_TO_ORDER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  AUTHORIZED: 'AUTHORIZED',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED',
  SETTLED: 'SETTLED'
};

exports.OrderItemStatus = exports.$Enums.OrderItemStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  ORIGINAL: 'ORIGINAL',
  FEE: 'FEE',
  SERVICE_FEE: 'SERVICE_FEE'
};

exports.AppService = exports.$Enums.AppService = {
  ECOMMERCE: 'ECOMMERCE',
  RIDES: 'RIDES',
  RENTAL: 'RENTAL'
};

exports.RiderVehicleType = exports.$Enums.RiderVehicleType = {
  DRIVER: 'DRIVER',
  MOTORCYCLE: 'MOTORCYCLE',
  BICYCLE: 'BICYCLE'
};

exports.RiderApplicationStatus = exports.$Enums.RiderApplicationStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED'
};

exports.RentalRequestStatus = exports.$Enums.RentalRequestStatus = {
  PENDING_QUOTE: 'PENDING_QUOTE',
  QUOTED: 'QUOTED',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  PAID: 'PAID'
};

exports.SenderType = exports.$Enums.SenderType = {
  CUSTOMER: 'CUSTOMER',
  DRIVER: 'DRIVER'
};

exports.DriverStatus = exports.$Enums.DriverStatus = {
  OFFLINE: 'OFFLINE',
  ONLINE: 'ONLINE',
  BUSY: 'BUSY',
  SUSPENDED: 'SUSPENDED'
};

exports.RideType = exports.$Enums.RideType = {
  STANDARD: 'STANDARD',
  PREMIUM: 'PREMIUM',
  POOL: 'POOL',
  DELIVERY: 'DELIVERY'
};

exports.RideStatus = exports.$Enums.RideStatus = {
  REQUESTED: 'REQUESTED',
  ACCEPTED: 'ACCEPTED',
  ARRIVING: 'ARRIVING',
  ARRIVED: 'ARRIVED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.RidePaymentMethod = exports.$Enums.RidePaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  MOBILE_MONEY: 'MOBILE_MONEY',
  WALLET: 'WALLET'
};

exports.DistanceUnit = exports.$Enums.DistanceUnit = {
  KILOMETER: 'KILOMETER',
  MILE: 'MILE',
  METER: 'METER'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  COMPLETED: 'COMPLETED',
  AUTHORIZED: 'AUTHORIZED'
};

exports.TwilioMessageType = exports.$Enums.TwilioMessageType = {
  OTP: 'OTP',
  PIN: 'PIN',
  COMBINED: 'COMBINED',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  Role: 'Role',
  RolePermission: 'RolePermission',
  OperatorEntity: 'OperatorEntity',
  User: 'User',
  DeliveryAddress: 'DeliveryAddress',
  PaymentGatewayServiceProvider: 'PaymentGatewayServiceProvider',
  Device: 'Device',
  Session: 'Session',
  OTP: 'OTP',
  Product: 'Product',
  ProductImage: 'ProductImage',
  Category: 'Category',
  Location: 'Location',
  ProductAttribute: 'ProductAttribute',
  ProductTranslation: 'ProductTranslation',
  ProductDeliveryOption: 'ProductDeliveryOption',
  CategoryTranslation: 'CategoryTranslation',
  SellerKyc: 'SellerKyc',
  BankAccount: 'BankAccount',
  Wallet: 'Wallet',
  PaymentMethod: 'PaymentMethod',
  Settlement: 'Settlement',
  ProductView: 'ProductView',
  ProductOrderInterest: 'ProductOrderInterest',
  OrderItem: 'OrderItem',
  ExternalTransaction: 'ExternalTransaction',
  UCP: 'UCP',
  RiderApplication: 'RiderApplication',
  RiderDocument: 'RiderDocument',
  RentalRequest: 'RentalRequest',
  RentalMessage: 'RentalMessage',
  Driver: 'Driver',
  DriverLocation: 'DriverLocation',
  RideRequest: 'RideRequest',
  Ride: 'Ride',
  RideToken: 'RideToken',
  RideLocation: 'RideLocation',
  DriverEarning: 'DriverEarning',
  RideService: 'RideService',
  orders: 'orders',
  TwilioNotification: 'TwilioNotification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
